buildscript {

	repositories {
		jcenter()
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${ springBootVersion }")
		classpath "io.spring.gradle:dependency-management-plugin:$springGradleBomPluginVersion"
		classpath('se.transmode.gradle:gradle-docker:1.2')
	}
}

def servicePattern = ':[\\w]+-service'


allprojects {

	apply plugin: "io.spring.dependency-management"
	apply plugin: 'org.springframework.boot'
	apply plugin: 'maven'


	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	repositories {
		jcenter()
		mavenCentral()
		maven { url "http://sndyuk.github.com/maven" }
		mavenLocal()
	}
}


subprojects {

	apply plugin: 'docker'

	dependencyManagement {
		imports {
			mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
		}
	}

	dependencies {
		compile('org.springframework.boot:spring-boot-starter-web')
		compile("org.springframework.boot:spring-boot-starter-actuator")

		compile('org.springframework.cloud:spring-cloud-starter-eureka')
		compile('org.springframework.cloud:spring-cloud-starter-hystrix')
		compile('org.fluentd:fluent-logger:0.3.2')
		compile('com.sndyuk:logback-more-appenders:1.1.1')

		testCompile('org.springframework.boot:spring-boot-starter-test')
	}

	repositories {
		mavenLocal()
		jcenter()
		mavenCentral()

	}

	// add task 'buildDocker' if Dockerfile exist
	if (project.file('src/main/docker/Dockerfile').exists()) {
		task buildDocker(type: Docker, dependsOn: build) {
			push = false
			applicationName = jar.baseName
			dockerfile = file('src/main/docker/Dockerfile')
			doFirst {
				copy {
					from jar
					into stageDir
				}
			}
		}
	}

}

repositories {
	mavenCentral()
}



